// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Models;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(PMBContext))]
    partial class PMBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Placemybet.Models.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dinero")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Fecha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MailUsuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MercadoOverUnder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("TipoApuesta")
                        .HasColumnType("double");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaId");

                    b.HasIndex("EventoId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Apuestas");
                });

            modelBuilder.Entity("Placemybet.Models.Cuenta", b =>
                {
                    b.Property<int>("CuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<string>("Tarjeta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CuentaId");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("Placemybet.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EqLoc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EqVis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MercadoId")
                        .HasColumnType("int");

                    b.Property<string>("OverUnder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EventoId");

                    b.HasIndex("MercadoId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Placemybet.Models.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("CuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("DineroOver")
                        .HasColumnType("double");

                    b.Property<double>("DineroUnder")
                        .HasColumnType("double");

                    b.Property<string>("OverUnder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MercadoId");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 2,
                            CuotaOver = 1.0,
                            CuotaUnder = 1.0,
                            DineroOver = 1.0,
                            DineroUnder = 1.0,
                            OverUnder = "Gamma Ray"
                        });
                });

            modelBuilder.Entity("Placemybet.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UsuarioId");

                    b.HasIndex("CuentaId")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Placemybet.Models.Apuesta", b =>
                {
                    b.HasOne("Placemybet.Models.Evento", "Evento")
                        .WithMany("Apuesta")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placemybet.Models.Usuario", "Usuario")
                        .WithMany("Apuesta")
                        .HasForeignKey("UsuarioId1");
                });

            modelBuilder.Entity("Placemybet.Models.Evento", b =>
                {
                    b.HasOne("Placemybet.Models.Mercado", "Mercado")
                        .WithMany("Eventos")
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Placemybet.Models.Usuario", b =>
                {
                    b.HasOne("Placemybet.Models.Cuenta", "Cuenta")
                        .WithOne("Usuario")
                        .HasForeignKey("Placemybet.Models.Usuario", "CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
